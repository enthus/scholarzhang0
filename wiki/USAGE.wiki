#summary general HOWTO after installation.
#labels Phase-Deploy

== 使用ipset ==

注意ipset的版本应该大于4.2，否则hash表扩大的时候某种参数设置可能会导致kernel oops。

ipset可以高效地定义一组ip地址，使得一条iptables规则就可以匹配处理这些地址。在`examples`目录中提供了Google的地址段的ipset定义，你也可以自己定义其他的地址段。

定义Google的地址段：
{{{
# ipset -R
-N YOUTUBE nethash --hashsize 50 --probes 1
-A YOUTUBE 64.15.112.0/20
-A YOUTUBE 82.129.37.0/24
-A YOUTUBE 208.65.152.0/22
-A YOUTUBE 208.117.224.0/19
-A YOUTUBE 213.146.171.0/24
COMMIT
^D
}}}

如果`--hashsize`不够大，ipset会自动调整尺寸并记录到syslog。如果尺寸扩大次数太多则考虑增大probes值。`--probes`值越低匹配性能越好，但是会导致hash表尺寸较大；反之如果probes值较大，hash表尺寸会比较小，但是匹配性能低一些。你可以根据情况调整到满意的数值。

在定义完几个网段之后你可以把这些网段一起组成一个列表：
{{{
# ipset -R
-N NOCLIP setlist --size 4
-A NOCLIP GOOGLE
-A NOCLIP YOUTUBE
COMMIT
^D
}}}
然后在iptables规则中直接使用NOCLIP即可。

== 配置iptables ==
西厢计划一共提供了三个iptables模块：ZHANG，CUI和gfw。其中前两个是目标模块，最后一个是匹配模块。

=== ZHANG: 客户端连接混淆 ===
{{{
# iptables -A INPUT \
-p tcp --sport 80 --tcp-flags FIN,SYN,RST,ACK SYN,ACK \
-m state --state ESTABLISHED \
-m set --match-set NOCLIP src \
-j ZHANG \
-m comment --comment "client-side connection obfuscation"
}}}

这条规则意味着当在TCP/80端口收到一个SYN/ACK包，并且这个包对应了一个活动的TCP连接，并且源地址在NOCLIP定义的地址段中，就执行ZHANG动作，发出特制的包混淆连接，导致GFW认为连接已经结束，但是实际上连接继续，从而避免关键词检测。

但是对于一些不遵守RFC的目标主机或者防火墙，这可能导致正常不含关键词的连接被对方终止或者忽略。这也就是使用ipset限制ZHANG的作用范围的动机。在极少的情况下会出现其他特殊的现象，因此我们需要采取下面的措施。

=== 记录GFW产生的伪包 ===
{{{
# iptables -A INPUT \
-p tcp --sport 80 \
-m state --state ESTABLISHED \
-m gfw \
-j LOG --log-level info --log-prefix "gfw: " \
-m comment --comment "log gfw tcp resets"
}}}

`-m gfw`的作用就是根据包的字段监测GFW的报文指纹。当浏览器中看见连接重置的时候，去检查syslog就可以知道是否是GFW所为。

=== DNS免污染、劫持 ===
{{{
# iptables -A INPUT \
-p udp --sport 53 \
-m state --state ESTABLISHED \
-m gfw \
-j DROP \
-m comment --comment "drop gfw dns hijacks"
}}}

`-m gfw`同样可以匹配GFW发出的DNS劫持包，并针对性地采取丢弃的措施。将nameserver设置（resolv.conf或者dhclient.conf中的prepend domain-name-servers）为一个未收污染的服务器，比如8.8.8.8，然后开启此条规则，便可获得正确的解析结果。

=== CUI: 服务端连接混淆 ===
{{{
# iptables -A INPUT \
-p tcp --dport 80 --tcp-flags FIN,SYN,RST,ACK SYN \
-m state --state NEW \
-m set --match-set CHINA src \
-j CUI \
-m comment --comment "server-side connection obfuscation"
}}}

原理与ZHANG类似，只是方向相反。

== 特性 ==
对于无法采取IP地址封锁的目标，这种方法特别有效。一个最直接的例子就是Youtube以及其他所有Google产品，可以通过这种方式在ipv4线路上不经过代理直连。初期测试中，Youtube使用非常流畅。

需要注意的是，ZHANG和CUI是“最终目标”，它们会直接ACCEPT送给它们的包，因此对于这些包，之后的规则都不会起作用。所以某些情况下你应该将以ZHANG或CUI为目标的规则放在最后、其他过滤规则的后面。

== 解决故障 ==
当浏览器显示连接重置的时候，检查syslog看是否是GFW所为。

也可以用tcpdump保存流量，当问题发生时可以用wireshark回溯查找原因。
{{{
$ cd /dev/shm
# tcpdump -Kpq -C2 -W10 -ieth0 -s0 -wcap port 80 &
}}}
当浏览器工作不正常时，输入`fg`然后`^C`结束程序，打开最新的一个dump。稍微解释一下参数含义：`-K`不检查TCP检验和，`-p`不使用混杂模式，`-q`安静，`-C2`每2000000字节换一个文件保存，`-W10`最多十个文件循环使用，`-ieth0`使用eth0，`-s0`捕获整个包，`-wcap`文件名为“capXX”。也可以自行调整。